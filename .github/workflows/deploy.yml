name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual deployment

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build application
        run: npm run build:prod

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: test # Only deploy if tests pass
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          script: |
            set -e  # Exit on any error
            
            # Navigate to project directory
            cd ${{ secrets.DEPLOY_PATH || '/app/expense-tracker' }}
            
            # Pull latest changes first (force reset to avoid conflicts)
            echo "üì• Pulling latest code..."
            git fetch origin main
            git reset --hard origin/main
            
            # Now the deploy script should exist, make it executable
            if [ -f scripts/deploy.sh ]; then
              echo "‚úÖ Found deploy script, using zero-downtime deployment..."
              chmod +x scripts/deploy.sh
              ./scripts/deploy.sh
            else
              echo "‚ö†Ô∏è Deploy script not found, using fallback deployment..."
              
              # Fallback: Basic zero-downtime deployment
              echo "üöÄ Starting basic zero-downtime deployment..."
              
              # Check if containers are running
              OLD_RUNNING=false
              if docker compose ps | grep -q "Up"; then
                OLD_RUNNING=true
                echo "‚úÖ Detected running deployment"
              else
                echo "‚ÑπÔ∏è No existing deployment found"
              fi
              
              # Build new image
              echo "üî® Building new Docker image..."
              docker compose build
              
              if [ "$OLD_RUNNING" = true ]; then
                echo "üîÑ Performing rolling update..."
                
                # Debug: Check current directory and files
                echo "üîç Debug info:"
                echo "Current directory: $(pwd)"
                echo "Dockerfile exists: $(test -f Dockerfile && echo 'YES' || echo 'NO')"
                echo "Data directory exists: $(test -d data && echo 'YES' || echo 'NO')"
                echo "Contents of current directory:"
                ls -la
                
                # Ensure data directory exists with proper permissions
                echo "üìÅ Setting up data directory..."
                mkdir -p data
                
                # Try to set permissions, but don't fail if we can't
                if ! chmod 755 data 2>/dev/null; then
                  echo "‚ö†Ô∏è Could not change data directory permissions (may not be needed)"
                  echo "üìã Current data directory permissions:"
                  ls -la data 2>/dev/null || echo "Directory listing not available"
                fi
                
                # For SQLite, we need to temporarily stop old container to avoid database locks
                # This provides "minimal downtime" rather than "zero downtime" due to SQLite limitations
                echo "‚ö†Ô∏è SQLite requires minimal downtime for database lock safety..."
                echo "‚èπÔ∏è Stopping old container..."
                docker compose down
                
                echo "üöÄ Starting new deployment..."
                docker compose up -d
                
                # Health check with retries (faster checks for quick-starting service)
                echo "üè• Starting health checks..."
                RETRY_COUNT=0
                MAX_RETRIES=6
                RETRY_DELAY=5
                
                while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                  echo "üîç Health check attempt $((RETRY_COUNT + 1))/$MAX_RETRIES..."
                  if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
                    echo "‚úÖ Deployment successful! Service is healthy."
                    break
                  else
                    if [ $RETRY_COUNT -eq $((MAX_RETRIES - 1)) ]; then
                      echo "‚ùå Health check failed after $MAX_RETRIES attempts"
                      echo "üìã Container logs for debugging:"
                      docker compose logs --tail=50
                      echo "üìä Container status:"
                      docker compose ps
                      exit 1
                    else
                      echo "‚è≥ Health check failed, retrying in ${RETRY_DELAY}s..."
                      sleep $RETRY_DELAY
                      RETRY_COUNT=$((RETRY_COUNT + 1))
                    fi
                  fi
                done
              else
                echo "üöÄ First deployment..."
                docker compose up -d
                
                # Health check for first deployment
                echo "üè• Starting health checks for first deployment..."
                RETRY_COUNT=0
                MAX_RETRIES=6
                RETRY_DELAY=5
                
                while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                  echo "üîç Health check attempt $((RETRY_COUNT + 1))/$MAX_RETRIES..."
                  if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
                    echo "‚úÖ First deployment successful! Service is healthy."
                    break
                  else
                    if [ $RETRY_COUNT -eq $((MAX_RETRIES - 1)) ]; then
                      echo "‚ùå First deployment health check failed after $MAX_RETRIES attempts"
                      echo "üìã Container logs for debugging:"
                      docker compose logs --tail=50
                      echo "üìä Container status:"
                      docker compose ps
                      exit 1
                    else
                      echo "‚è≥ Health check failed, retrying in ${RETRY_DELAY}s..."
                      sleep $RETRY_DELAY
                      RETRY_COUNT=$((RETRY_COUNT + 1))
                    fi
                  fi
                done
              fi
              
              # Cleanup
              docker image prune -af
              echo "üéâ Deployment completed!"
            fi

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.deploy.result == 'success'
        run: |
          echo "üéâ Deployment successful!"
          # Add notification logic here (Slack, Discord, email, etc.)
          
      - name: Notify failure
        if: needs.test.result == 'failure' || needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          # Add notification logic here