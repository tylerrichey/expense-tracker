name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual deployment

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build application
        run: npm run build

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: test # Only deploy if tests pass
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Debug secrets
        run: |
          echo "Host set: ${{ secrets.DEPLOY_HOST != '' }}"
          echo "User set: ${{ secrets.DEPLOY_USER != '' }}"
          echo "Key set: ${{ secrets.DEPLOY_SSH_KEY != '' }}"
          echo "Path set: ${{ secrets.DEPLOY_PATH != '' }}"
          echo "Port set: ${{ secrets.DEPLOY_PORT != '' }}"
      
      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          script: |
            set -e  # Exit on any error
            
            echo "üöÄ Starting deployment..."
            
            # Navigate to project directory
            cd ${{ secrets.DEPLOY_PATH || '/app/expense-tracker' }}
            
            # Pull latest changes
            echo "üì• Pulling latest code..."
            git pull origin main
            
            # Stop existing containers
            echo "‚èπÔ∏è Stopping containers..."
            docker compose down
            
            # Build and start new containers
            echo "üî® Building and starting containers..."
            docker compose up -d --build
            
            # Clean up old images
            echo "üßπ Cleaning up old Docker images..."
            docker image prune -af
            
            # Health check
            echo "üè• Waiting for application to start..."
            sleep 15
            
            # Check if containers are running
            if docker compose ps | grep -q "Up"; then
              echo "‚úÖ Containers are running"
              
              # Test health endpoint
              echo "üè• Testing application health..."
              if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
                echo "‚úÖ Health check passed - Deployment successful!"
              else
                echo "‚ö†Ô∏è Health check failed but containers are running"
                echo "Application may still be starting up..."
              fi
            else
              echo "‚ùå Deployment failed - containers not running"
              docker compose logs
              exit 1
            fi
            
            echo "üéâ Deployment completed successfully!"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.deploy.result == 'success'
        run: |
          echo "üéâ Deployment successful!"
          # Add notification logic here (Slack, Discord, email, etc.)
          
      - name: Notify failure
        if: needs.test.result == 'failure' || needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          # Add notification logic here