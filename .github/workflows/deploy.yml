name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual deployment

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build application
        run: npm run build

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: test # Only deploy if tests pass
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          script: |
            set -e  # Exit on any error
            
            # Navigate to project directory
            cd ${{ secrets.DEPLOY_PATH || '/app/expense-tracker' }}
            
            # Pull latest changes first
            echo "📥 Pulling latest code..."
            git pull origin main
            
            # Now the deploy script should exist, make it executable
            if [ -f scripts/deploy.sh ]; then
              echo "✅ Found deploy script, using zero-downtime deployment..."
              chmod +x scripts/deploy.sh
              ./scripts/deploy.sh
            else
              echo "⚠️ Deploy script not found, using fallback deployment..."
              
              # Fallback: Basic zero-downtime deployment
              echo "🚀 Starting basic zero-downtime deployment..."
              
              # Check if containers are running
              OLD_RUNNING=false
              if docker compose ps | grep -q "Up"; then
                OLD_RUNNING=true
                echo "✅ Detected running deployment"
              else
                echo "ℹ️ No existing deployment found"
              fi
              
              # Build new image
              echo "🔨 Building new Docker image..."
              docker compose build
              
              if [ "$OLD_RUNNING" = true ]; then
                echo "🔄 Performing rolling update..."
                
                # Debug: Check current directory and files
                echo "🔍 Debug info:"
                echo "Current directory: $(pwd)"
                echo "Dockerfile exists: $(test -f Dockerfile && echo 'YES' || echo 'NO')"
                echo "Contents of current directory:"
                ls -la
                
                # Create temporary compose file for new container on port 3001
                echo "🚀 Creating temporary deployment on port 3001..."
                cat > docker-compose.temp.yml << 'EOF'
services:
  expense-tracker-new:
    build: .
    container_name: expense-tracker-new
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - GOOGLE_PLACES_API_KEY=${GOOGLE_PLACES_API_KEY:-}
      - AUTH_PASSWORD=${AUTH_PASSWORD:-}
    volumes:
      - ./data:/app/data
    restart: "no"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
EOF
                
                # Start new container using docker compose
                docker compose -f docker-compose.temp.yml up -d
                
                # Wait and health check
                echo "⏳ Waiting for new deployment..."
                sleep 30
                
                # Health check with retries
                RETRY_COUNT=0
                MAX_RETRIES=6
                while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                  if curl -f http://localhost:3001/api/health > /dev/null 2>&1; then
                    echo "✅ New deployment healthy, switching..."
                    break
                  else
                    echo "⏳ Health check attempt $((RETRY_COUNT + 1))/$MAX_RETRIES failed, retrying in 10s..."
                    sleep 10
                    RETRY_COUNT=$((RETRY_COUNT + 1))
                  fi
                done
                
                if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                  echo "❌ New deployment failed health checks, rolling back..."
                  docker compose -f docker-compose.temp.yml down
                  rm -f docker-compose.temp.yml
                  exit 1
                fi
                
                # New deployment is healthy, switch over
                echo "🔄 Switching to new deployment..."
                docker compose down
                docker compose -f docker-compose.temp.yml down
                rm -f docker-compose.temp.yml
                docker compose up -d
                
                # Final health check
                sleep 15
                if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
                  echo "✅ Deployment successful!"
                else
                  echo "⚠️ Final health check failed but containers running"
                fi
              else
                echo "🚀 First deployment..."
                docker compose up -d
                sleep 15
                if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
                  echo "✅ First deployment successful!"
                else
                  echo "⚠️ Health check failed but containers running"
                fi
              fi
              
              # Cleanup
              docker image prune -af
              echo "🎉 Deployment completed!"
            fi

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.deploy.result == 'success'
        run: |
          echo "🎉 Deployment successful!"
          # Add notification logic here (Slack, Discord, email, etc.)
          
      - name: Notify failure
        if: needs.test.result == 'failure' || needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          # Add notification logic here